{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"sbService": {
		"prefix": "sbservice",
		"body": [
			"@Autowired",
			" private ${TM_FILENAME_BASE/(.*)Service/$1/g}Repository repository${TM_FILENAME_BASE/(.*)Service/$1/g};",
			"",
			"	public ${TM_FILENAME_BASE/(.*)Service/$1/g} findById(Integer aId) {",
			"		return repository${TM_FILENAME_BASE/(.*)Service/$1/g}.findById(aId).orElseThrow(() -> new ObjectNotFoundException(aId.toString()));",
			"	}",
			"",
			"  public ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO findDTOById(Integer aId) {",
			"	  ${TM_FILENAME_BASE/(.*)Service/$1/g} obj = findById(aId);",
			"	  return toDTO(obj);",
			"  }",
			"",
			"	public ${TM_FILENAME_BASE/(.*)Service/$1/g} save(${TM_FILENAME_BASE/(.*)Service/$1/g}DTO aDTO) {",
			"		${TM_FILENAME_BASE/(.*)Service/$1/g} entity = fromDTO(null, aDTO);",
			"		entity = repository${TM_FILENAME_BASE/(.*)Service/$1/g}.save(entity);",
			"		return entity;",
			"	}",
			"",
			"	public ${TM_FILENAME_BASE/(.*)Service/$1/g} update(Integer aId, ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO aDTO) {",
			"		repository${TM_FILENAME_BASE/(.*)Service/$1/g}.findById(aId).orElseThrow(() -> new ObjectNotFoundException(aId.toString()));",
			"		${TM_FILENAME_BASE/(.*)Service/$1/g} entity = fromDTO(aId, aDTO);",
			"		entity = repository${TM_FILENAME_BASE/(.*)Service/$1/g}.save(entity);",
			"		return entity;",
			"	}",
			"",
			"	public void deleteById(Integer aId) {",
			"		${TM_FILENAME_BASE/(.*)Service/$1/g} entity = repository${TM_FILENAME_BASE/(.*)Service/$1/g}.findById(aId).orElse(null);",
			"		if (entity != null) {",
			"			repository${TM_FILENAME_BASE/(.*)Service/$1/g}.deleteById(entity.getId());",
			"		}",
			"	}",
			"",
			"	public Page<${TM_FILENAME_BASE/(.*)Service/$1/g}> findAll(Integer aPage, Integer aLinesPerPage, String aOrderBy, String aDirection) {",
			"		PageRequest pageRequest = PageRequest.of(aPage, aLinesPerPage, Direction.valueOf(aDirection), aOrderBy);",
			"		return repository${TM_FILENAME_BASE/(.*)Service/$1/g}.findAll(pageRequest);",
			"	}",
			"",
			"	public Page<${TM_FILENAME_BASE/(.*)Service/$1/g}DTO> findDTOAll(Integer aPage, Integer aLinesPerPage, String aOrderBy, String aDirection) {",
			"		Page<${TM_FILENAME_BASE/(.*)Service/$1/g}> list = findAll(aPage, aLinesPerPage, aOrderBy, aDirection);",
			"		Page<${TM_FILENAME_BASE/(.*)Service/$1/g}DTO> listDTO = list.map(x -> {",
			"			return toDTO(x);",
			"		});",
			"",
			"		return listDTO;",
			"	}",
			"",
			"	public ${TM_FILENAME_BASE/(.*)Service/$1/g} fromDTO(Integer aId, ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO aDTO) {",
			"		${TM_FILENAME_BASE/(.*)Service/$1/g} entity = new ${TM_FILENAME_BASE/(.*)Service/$1/g}();",
			"		//TODO implementar o parse ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO para ${TM_FILENAME_BASE/(.*)Service/$1/g}",
			"		return entity;",
			"	}",
			"",
			"	public ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO toDTO(${TM_FILENAME_BASE/(.*)Service/$1/g} aEntity) {",
			"		${TM_FILENAME_BASE/(.*)Service/$1/g}DTO dto = new ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO();",
			"		//TODO implementar o parse ${TM_FILENAME_BASE/(.*)Service/$1/g} para ${TM_FILENAME_BASE/(.*)Service/$1/g}DTO",
			"		return dto;",
			"	}",
		],
		"description": "Template para service spring-boot"
	},
	"sbResource": {
		"prefix": "sbresource",
		"description": "Template para resource spring-boot",
		"body": [
			"	@Value(value = \"$${api.url.externa}\")",
			"	private String urlExterna;",
			"",
			"	@Autowired",
			"	private ${TM_FILENAME_BASE/(.*)Resource/$1/g}Service service${TM_FILENAME_BASE/(.*)Resource/$1/g};",
			"",
			"	@ApiOperation(\"Busca por ID\")",
			"	@RequestMapping(value = \"/{aId}\", method = RequestMethod.GET)",
			"	public ResponseEntity<${TM_FILENAME_BASE/(.*)Resource/$1/g}DTO> findById(@PathVariable Integer aId) {",
			"		return ResponseEntity.ok().body(service${TM_FILENAME_BASE/(.*)Resource/$1/g}.findDTOById(aId));",
			"	}",
			"",
			"	@ApiOperation(\"Busca paginada\")",
			"	@RequestMapping(value = \"/list\",method = RequestMethod.GET)",
			"	public ResponseEntity<Page<${TM_FILENAME_BASE/(.*)Resource/$1/g}DTO>> findAll(",
			"	    @RequestParam(value = \"page\", defaultValue = \"0\") Integer aPage,",
			"	    @RequestParam(value = \"linesPerPage\", defaultValue = \"24\") Integer aLinesPerPage,",
			"	    @RequestParam(value = \"orderBy\", defaultValue = \"id\") String aOrderBy,",
			"	    @RequestParam(value = \"direction\", defaultValue = \"ASC\") String aDirection) {",
			"		Page<${TM_FILENAME_BASE/(.*)Resource/$1/g}DTO> list = service${TM_FILENAME_BASE/(.*)Resource/$1/g}.findDTOAll(aPage, aLinesPerPage, aOrderBy, aDirection);",
			"		return ResponseEntity.ok().body(list);",
			"	}",
			"",
			"	@ApiOperation(\"Salva\")",
			"	@RequestMapping(method = RequestMethod.POST)",
			"	public ResponseEntity<Void> save(@Valid @RequestBody ${TM_FILENAME_BASE/(.*)Resource/$1/g}DTO aEntityDTO) {",
			"		${TM_FILENAME_BASE/(.*)Resource/$1/g} aEntity = service${TM_FILENAME_BASE/(.*)Resource/$1/g}.save(aEntityDTO);",
			"		URI uri = ServletUriComponentsBuilder.fromHttpUrl(urlExterna).path(\"/{id}\").buildAndExpand(aEntity.getId()).toUri();",
			"		return ResponseEntity.created(uri).build();",
			"	}",
			"",
			"	@ApiOperation(\"Atualiza\")",
			"	@RequestMapping(value = \"/{aId}\", method = RequestMethod.PUT)",
			"	public ResponseEntity<Void> update(@PathVariable Integer aId, @Valid @RequestBody ${TM_FILENAME_BASE/(.*)Resource/$1/g}DTO aEntityDTO) {",
			"		service${TM_FILENAME_BASE/(.*)Resource/$1/g}.update(aId, aEntityDTO);",
			"		return ResponseEntity.noContent().build();",
			"	}",
			"",
			"	@ApiOperation(\"Deleta\")",
			"	@RequestMapping(value = \"/{aId}\", method = RequestMethod.DELETE)",
			"	public ResponseEntity<Void> delete(@PathVariable Integer aId) {",
			"		service${TM_FILENAME_BASE/(.*)Resource/$1/g}.deleteById(aId);",
			"		return ResponseEntity.noContent().build();",
			"	}"
		]
	}
}

